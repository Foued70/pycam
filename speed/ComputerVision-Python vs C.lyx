#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass IEEEtran
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Comparing Python and C for Computer Vision
\begin_inset Note Note
status open

\begin_layout Plain Layout
Comparing Python and C for Computer Vision?
\end_layout

\begin_layout Plain Layout
Developing Computer Vision Programs?
\end_layout

\begin_layout Plain Layout
Cprofiling gprof, cProfile in python
\end_layout

\begin_layout Plain Layout
http://developer.apple.com/tools/sharkoptimize.html
\end_layout

\begin_layout Plain Layout
You should have few code snippets, maybe 3 will sufficient, the rest in
 the appendices yes.
\end_layout

\end_inset


\end_layout

\begin_layout Author
Brian Thorne, Raphael Grasset, Richard Green
\begin_inset Newline newline
\end_inset

HIT Lab NZ, University of Canterbury, Private Bag 4800, Christchurch
\begin_inset Newline newline
\end_inset

Email: {brian.thorne|raphael.grasset|richard.green}@hitlabnz.org
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Keywords??? Python, C++
\end_layout

\end_inset


\end_layout

\begin_layout Abstract
An introduction to and argument for computer vision in Python inplace of
 the C programming language.
 From the general concept to its implementation with some current open-source
 libraries (opencv, numpy/scipy, pygame).
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The purpose of this paper is an introduction to computer vision (CV) and
 image processing using the multipurpose programming language Python.
 At present the bulk of computer vision applications are programmed in C
 or C++.
 There a significant benefits to developer time if Python is a viable alternativ
e.
 I aim to show what is possible with current libraries, demonstrate their
 usability, explore their limitations, compare performance and cover elements
 of best coding practice.
\end_layout

\begin_layout Standard
Firstly, I will briefly present the basics of computer vision; such as video
 grabbing, image processing and computer vision algorithms.
 I will illustrate with the Python bindings to the OpenCV library and show
 different examples such as displaying a video image, some filtering algorithms
 (dilation, gaussian blur), and how to implement facial recognition.
 I will go on to describe how these and other computer vision related tasks
 can be achieved with other Python tools such as scipy.
 I will show how these libraries can be used in conjunction to perform video
 capturing, image processing and video feedback.
\begin_inset Note Note
status open

\begin_layout Plain Layout
if it's openCV in C++ and openCV in Python, use a simple notation: OPENCV_C++,
 OPENCV_PY that you introduce in the text.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Standard
Python is a general purpose dynamic programming language.
 It is highley regarded due in no small part for its fast development time.
\end_layout

\begin_layout Subsection
OpenCV
\end_layout

\begin_layout Standard
Intel's open source computer vision libraries...
 History, capabilities.
 C library.
 Python bindings.
 IPP.
\end_layout

\begin_layout Subsection
NumPy
\end_layout

\begin_layout Standard
Numpy gives N-dimensional arrays to python.
 Has very fast raw data crunching, iterating.
 Much easier to use than multidimensinal matrices in C.
\end_layout

\begin_layout Subsection
SciPy
\end_layout

\begin_layout Standard
SciPy is a set of libraries and tools for scientific and mathematical work
 build ontop of NumPy.
 Has filters and convolution etc much like matlab.
 Should be much simpler higher level code, without any significant performance
 loss.
\end_layout

\begin_layout Section
Theory of operation
\end_layout

\begin_layout Subsection
Image Aquisition
\end_layout

\begin_layout Standard
The first thing to think about in computer vision programs is where the
 image data comes from.
 In this report only live data from a webcam is under consideration.
 The main difference in using a live system is the time available for processing
 is very constrained to allow a framarate sufficient for live viewing.
 Processing on static images or recorded video data doesn't have this constraint.
\end_layout

\begin_layout Subsubsection
Aquiring and displaying an image in C with OpenCV
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:C-Image-capture"

\end_inset

 opens up a new camera capture device, and takes one frame, it creates a
 new window and displays it
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
For brevity these code snippets do not carry out error checking.
 It is assumed that a camera was found succesfully and that a frame was
 available and returned.
 The C++ code VideoCapturePlayer does carry out this error checking.
\end_layout

\end_inset

.
 Using this as a template it is straight forward to wrap the capture and
 display in a loop, this forms the basis of the C++ class VideoCapturePlayer
 included in the appendix
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
RAPH...
 So what is the deal with code.
 VideoCapturePlayer in C Plus Plus and in Python are many times longer than
 the rest of the code snippets.
 Are the algorithms okay as floating elements?
\end_layout

\end_inset

.
 This C++ class is used in the other examples to keep the code duplication
 and variation to a minimum.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout LyX-Code
#include "cv.h"
\end_layout

\begin_layout LyX-Code
#include "highgui.h"
\end_layout

\begin_layout LyX-Code
int main(){
\end_layout

\begin_layout LyX-Code
  IplImage  *frame;
\end_layout

\begin_layout LyX-Code
  CvCapture *capture;
\end_layout

\begin_layout LyX-Code
  capture = cvCreateCameraCapture(0);
\end_layout

\begin_layout LyX-Code
  cvNamedWindow( "Snapshot", 0 );
\end_layout

\begin_layout LyX-Code
  frame = cvQueryFrame( capture );
\end_layout

\begin_layout LyX-Code
  cvShowImage( "Snapshot", frame );
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:C-Image-capture"

\end_inset

Image capture and display with OpenCV in C.
 
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Acquiring and displaying an image in Python with OpenCV
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Python-Image-capture"

\end_inset

 does the same basic task of accessing a webcam and displaying one image
 in Python.
 As with C++, an object orrientated version of this acquisition loop with
 error checking is used in further tests.
 The VideoCapturePlayer object optionally takes a pointer to a function.
 The function takes the raw image, does some process on it, and returns
 a possibly modified image.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status collapsed

\begin_layout LyX-Code
from opencv import highgui as hg
\end_layout

\begin_layout LyX-Code
capture = hg.cvCreateCameraCapture(0)
\end_layout

\begin_layout LyX-Code
hg.cvNamedWindow("Snapshot")
\end_layout

\begin_layout LyX-Code
frame = hg.cvQueryFrame(capture)
\end_layout

\begin_layout LyX-Code
hg.cvShowImage("Snapshot", frame)
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Python-Image-capture"

\end_inset

Image capture and display in Python
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Comparison
\end_layout

\begin_layout Standard
Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:IO-bound-Webcam"

\end_inset

 shows results for taking an image from a webcam, drawing a box ontop of
 the image and displaying all with OpenCV.
 The average frames per second are taken over 3 runs each averaging over
 a 2 minute period.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:IO-bound-Webcam"

\end_inset

Simple IO bound test - Webcam streaming comparison of Python and C++.
 Results shown are in frames per second.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="6">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std Dev
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Python
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.0073
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.0073
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.0069
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.0072 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.68E-04 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
C++
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.9662
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.9642
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.9638
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.9647 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1.29E-03 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Oddly Python was faster....
 minor but still faster...
 interesting...
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO: Make the bars thinner
\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename report_data/image_capture_graph.png
	lyxscale 50
	width 80col%

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Comparison of Python and C++ performance using OpenCV for webcam capture,
 drawing on the image, and displaying.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Image Blur
\end_layout

\begin_layout Standard
One of the simplest operations is bluring an image.
 This can be achieved by adding gaussian blur.
 Mathematically this is achieved by convolving the image with a gaussian
 filter.
 The filter can be applied in two ways; applying a 1-dimensional filter
 twice, once in each direction; or secondly the image can be convolved with
 a 2-dimensional gaussian filter created by the product of two 1-dimensional
 filters.
 The gaussian function for obtaining the filter is in one dimension: 
\begin_inset Formula \begin{equation}
G\left(x\right)=\frac{1}{\sqrt{2\pi}\sigma}e^{-\frac{x^{2}}{2\sigma^{2}}}\label{eq:1D Gaussian Filter}\end{equation}

\end_inset

 And in two dimensions: 
\begin_inset Formula \begin{equation}
G\left(x,y\right)=\frac{1}{\sqrt{2\pi}\sigma^{2}}e^{-\frac{x^{2}+y^{2}}{2\sigma^{2}}}\label{eq:2D Gaussian Filter}\end{equation}

\end_inset


\begin_inset CommandInset citation
LatexCommand cite
key "key-5"

\end_inset

.
 OpenCV includes a gaussian filter that can be applied to an image by calling
 the 
\emph on
cvSmooth
\emph default
 function and passing the desired window size.
 SciPy has a multi-dimensional Gaussian filter that acts on a NumPy array.
\end_layout

\begin_layout Subsubsection
C++
\end_layout

\begin_layout Standard
Calling the OpenCV function cvSmooth to carry out gaussian blur with a filter
 size of 43.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide true
sideways false
status collapsed

\begin_layout LyX-Code
#include <iostream> 
\end_layout

\begin_layout LyX-Code
#include "videoCapturePlayer.h"
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
CvMat * gaussianBlur(CvMat *x){
\end_layout

\begin_layout LyX-Code
// Filter with gaussian smoothing
\end_layout

\begin_layout LyX-Code
    int filterSize = 43;
\end_layout

\begin_layout LyX-Code
    cvSmooth(x, x, CV_GAUSSIAN, filterSize);
\end_layout

\begin_layout LyX-Code
    return x;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
int main( int argc, char** argv ){
\end_layout

\begin_layout LyX-Code
    VideoCapturePlayer vcp = VideoCapturePlayer(&gaussianBlur);
\end_layout

\begin_layout LyX-Code
    vcp.init(); vcp.main();
\end_layout

\begin_layout LyX-Code
    return 0;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Gaussian-C"

\end_inset

Applying Gaussian Blur to webcam stream from C++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Python
\end_layout

\begin_layout Standard
In python taking advantage of VideoCapturePlayer, the Python class mentioned
 above, and using OpenCV to do the convolution for us.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide true
sideways false
status collapsed

\begin_layout LyX-Code
from VideoCapturePlayer import VideoCapturePlayer as VCP
\end_layout

\begin_layout LyX-Code
from opencv import cv
\end_layout

\begin_layout LyX-Code
def gaussianBlur(image):
\end_layout

\begin_layout LyX-Code
    """Blur an image"""     
\end_layout

\begin_layout LyX-Code
    result = cv.cvCreateMat(image.rows, image.cols, image.type)
\end_layout

\begin_layout LyX-Code
    filterSize = 43
\end_layout

\begin_layout LyX-Code
    cv.cvSmooth(image, result, cv.CV_GAUSSIAN, filterSize) # Carry out the
 filter operation
\end_layout

\begin_layout LyX-Code
    return result
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
if __name__ == "__main__":
\end_layout

\begin_layout LyX-Code
    title = "Guassian Filtered Output"
\end_layout

\begin_layout LyX-Code
    VCP(gaussianBlur, title).main()
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Gaussian-Python-OpenCV"

\end_inset

Gaussian Bluring in Python using OpenCV
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
This produces a blurred image as desired.
 
\end_layout

\begin_layout Standard
Secondly using the VideoCapturePlayer again but this time using scipy to
 do the convolution.
 To continue using the OpenCV camera capture, the image data must be converted
 into NumPy arrays; this has been achieved here by creating and using a
 Python decorator which converts before and after calling a Python function
 using NumPy.
 Also the filter parameters need converted to be compatible with OpenCV's
 cvSmooth defaults
\begin_inset CommandInset citation
LatexCommand cite
key "key-6"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide true
sideways false
status collapsed

\begin_layout LyX-Code
from numpy import array, uint8
\end_layout

\begin_layout LyX-Code
from scipy import signal, ndimage 
\end_layout

\begin_layout LyX-Code
from VideoCapturePlayer import VideoCapturePlayer as VCP 
\end_layout

\begin_layout LyX-Code
from misc import scipyFromOpenCV
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
def opencvFilt2sigma(size):
\end_layout

\begin_layout LyX-Code
    """OpenCV defaults to making sigma up with this formula"""
\end_layout

\begin_layout LyX-Code
    return (( size/2 ) - 1)*0.30 + 0.80
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
@scipyFromOpenCV
\end_layout

\begin_layout LyX-Code
def gaussianBlur(np_image):
\end_layout

\begin_layout LyX-Code
    """Blur an image with scipy"""
\end_layout

\begin_layout LyX-Code
    filterSize = opencvFilt2sigma(43)
\end_layout

\begin_layout LyX-Code
    result = ndimage.filters.gaussian_filter(np_image, (filterSize, filterSize,
 1))
\end_layout

\begin_layout LyX-Code
    return result
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
if __name__ == "__main__":
\end_layout

\begin_layout LyX-Code
    title = "Guassian Filtered Output"
\end_layout

\begin_layout LyX-Code
    VCP(gaussianBlur,title=title).main()
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Gaussian-Python-SciPy"

\end_inset

Gaussian Blurring in Python using SciPy
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Comparison
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blur_c.png
	lyxscale 20
	width 25col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
C++
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blur_opencv.png
	lyxscale 20
	width 25col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Python OpenCV
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blur_scipy.png
	lyxscale 20
	width 25col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Python SciPy
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Gaussian-Output-Images"

\end_inset

Output Images from Gaussian Blur Examples
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Oddly Python was faster again....
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="6">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Language
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Run 3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mean
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Std Dev
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Python
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.968987
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.953608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.970845
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
14.964480 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
9.95E-03 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CPlusPlus
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.08165
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.04797
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.04227
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.057297 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.13E-02 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Scipy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.107837
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.159811
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4.135005
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "tab:Gaussian-Results"

\end_inset

CPU bound test results - Gaussian Blur filtering on webcam stream.
 (in fps)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename report_data/gaussian_blur.png
	lyxscale 50
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
OpenCV performance carrying out Gaussian Blur
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Background subtractions
\end_layout

\begin_layout Standard
Double Diff, Graph Cut maybe....
\end_layout

\begin_layout Standard
reference Richard Greens paper
\end_layout

\begin_layout Subsection
Face Detection
\end_layout

\begin_layout Standard
Haar-Cascades....
 except from my objectDetect class....
 explain stuff here...
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide true
sideways false
status collapsed

\begin_layout LyX-Code
def detectObject(self,img):
\end_layout

\begin_layout LyX-Code
    """This should be pure opencv and reasonably quick."""
\end_layout

\begin_layout LyX-Code
    gray = cvCreateImage( cvSize(img.width,img.height), 8, 1 )
\end_layout

\begin_layout LyX-Code
    small_img = cvCreateImage( cvSize( cvRound (img.width/self.image_scale),
 
\end_layout

\begin_layout LyX-Code
                              cvRound (img.height/self.image_scale)), 8, 1
 )
\end_layout

\begin_layout LyX-Code
    cvCvtColor( img, gray, CV_BGR2GRAY )
\end_layout

\begin_layout LyX-Code
    cvResize( gray, small_img, CV_INTER_LINEAR )
\end_layout

\begin_layout LyX-Code
    cvEqualizeHist( small_img, small_img )
\end_layout

\begin_layout LyX-Code
    cvClearMemStorage( self.storage )
\end_layout

\begin_layout LyX-Code
    if( self.cascade ):
\end_layout

\begin_layout LyX-Code
        t = cvGetTickCount()
\end_layout

\begin_layout LyX-Code
        objects = cvHaarDetectObjects( small_img, self.cascade, self.storage,
\end_layout

\begin_layout LyX-Code
                   self.haar_scale, self.min_neighbors, self.haar_flags, self.min_si
ze )
\end_layout

\begin_layout LyX-Code
        t = cvGetTickCount() - t
\end_layout

\begin_layout LyX-Code
        if verbose:
\end_layout

\begin_layout LyX-Code
            print "%i objects found, detection time = %gms" % (objects.total,t/(c
vGetTickFrequency()*1000.))
\end_layout

\begin_layout LyX-Code
        return objects
\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Using the OpenCV Haar Detect Objects Function
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Harris Corner Detect, Ransac...
 
\end_layout

\begin_layout Section
Related Works
\end_layout

\begin_layout Standard
Part 2 should be "related works" as referencing people comparing: different
 version of CV library in different languages, in different platforms, maybe
 also people using OpenCV+IPL, people having implementing other CV library
 in Python, etc.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Thank Rob for the profiling help
\end_layout

\end_inset


\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
Initial thoughts are that Python will be slow, but for many applications
 probably fast enough not to notice.
 The benefits for quick prototyping of new algorithms and using those prototypes
 in the final product is a serious draw card...
\end_layout

\begin_layout Standard
Limitations (other than speed), hardware, Firewire, support, libraries and
 functionality?
\end_layout

\begin_layout Section
Appendix
\end_layout

\begin_layout Subsection
Code Listings
\end_layout

\begin_layout Section*
Software Links
\end_layout

\begin_layout Itemize
Pygame - a game making module for Python, aimed at new programmers.
 I will demonstrate how simple it is to get started in Computer Vision.
 http://pygame.org
\end_layout

\begin_layout Itemize
Pycam - All code from this project, my framework linking OpenCV to Pygame
 and NumPy.
 http://pycam.googlecode.com
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Python, By Guido Van Rossum.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://python.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

NumPy, By Enthought.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://numpy.scipy.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

SciPy, By Enthought.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://www.scipy.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

The OpenCV Library.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://opencv.willowgarage.com/wiki/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

Shapiro, L.
 G.
 & Stockman, G.
 C: "Computer Vision", page 137, 150.
 Prentence Hall, 2001
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"

\end_inset

Gary Bradski, Adrian Kaehler: 
\begin_inset Quotes eld
\end_inset

Learning OpenCV: computer vision with the OpenCV library
\begin_inset Quotes erd
\end_inset

, page 112.
 
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

OpenCV 1.1 C Reference, by OpenCV developers.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://opencv.willowgarage.com/documentation/index.html"

\end_inset


\end_layout

\end_body
\end_document
