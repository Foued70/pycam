#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{Warsaw}
% or ...

\setbeamercovered{transparent}
% or whatever (possibly just delete it)
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman times
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
This file is a solution template for:
\end_layout

\begin_layout Plain Layout
- Talk at a conference/colloquium.
 
\end_layout

\begin_layout Plain Layout
- Talk length is about 20min.
 
\end_layout

\begin_layout Plain Layout
- Style is ornate.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Copyright 2004 by Till Tantau <tantau@users.sourceforge.net>.
 
\end_layout

\begin_layout Plain Layout
In principle, this file can be redistributed and/or modified under the terms
 of the GNU Public License, version 2.
 However, this file is supposed to be a template to be modified for your
 own needs.
 For this reason, if you use this file as a template and not specifically
 distribute it as part of a another package/program, the author grants the
 extra permission to freely copy and modify this file as you see fit and
 even to delete this copyright notice.
 
\end_layout

\end_inset


\end_layout

\begin_layout Title
Using Python in Computer Vision: Performance and Usability
\begin_inset OptArg
status open

\begin_layout Plain Layout
Python Performance
\end_layout

\end_inset


\end_layout

\begin_layout Author
B.
\begin_inset space ~
\end_inset

Thorne
\end_layout

\begin_layout Institute
University of Canterbury
\end_layout

\begin_layout Date
Undergraduate Computer Vision Presentations, 2009
\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
- Either use conference name or its abbreviation.
 
\end_layout

\begin_layout Plain Layout
- Not really informative to the audience, more for people (including yourself)
 who are reading the slides online
\end_layout

\end_inset


\begin_inset OptArg
status collapsed

\begin_layout Plain Layout
COSC428-09
\end_layout

\begin_layout Plain Layout
\begin_inset Note Note
status open

\begin_layout Plain Layout
optional, should be abbreviation of conference name
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you have a file called "institution-logo-filename.xxx", where xxx is a
 graphic format that can be processed by latex or pdflatex, resp., then you
 can add a logo by uncommenting the following:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
pgfdeclareimage[height=0.5cm]{institution-logo}{python-logo-symbolonly.png}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
logo{
\backslash
pgfuseimage{institution-logo}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
The following causes the table of contents to be shown at the beginning
 of every subsection.
 Delete this, if you do not want it.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
AtBeginSubsection[]{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  
\backslash
frame<beamer>{ 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
frametitle{Outline}   
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    
\backslash
tableofcontents[currentsection,currentsubsection] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
If you wish to uncover everything in a step-wise fashion, uncomment the
 following command:
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

%
\backslash
beamerdefaultoverlayspecification{<+->}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Outline
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
Structuring a talk is a difficult task and the following structure may not
 be suitable.
 Here are some rules that apply for this solution: 
\end_layout

\begin_layout Plain Layout
- Exactly two or three sections (other than the summary).
 
\end_layout

\begin_layout Plain Layout
- At *most* three subsections per section.
 
\end_layout

\begin_layout Plain Layout
- Talk about 30s to 2min per frame.
 So there should be between about 15 and 30 frames, all told.
\end_layout

\begin_layout Plain Layout
- A conference audience is likely to know very little of what you are going
 to talk about.
 So *simplify*! 
\end_layout

\begin_layout Plain Layout
- In a 20min talk, getting the main ideas across is hard enough.
 Leave out details, even if it means being less precise than you think necessary.
 
\end_layout

\begin_layout Plain Layout
- If you omit details that are vital to the proof/implementation, just say
 so once.
 Everybody will be happy with that.
 
\end_layout

\end_inset


\end_layout

\begin_layout Section
Motivation & Background
\end_layout

\begin_layout Subsection
Why Look At Alternative Languages For Computer Vision?
\begin_inset OptArg
status open

\begin_layout Plain Layout
Why Change?
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Why Not Use C or C++?
\end_layout

\begin_layout Subtitle
Most people use C or C++ for Computer Vision work.
\end_layout

\begin_layout FrameSubtitle
\begin_inset Note Note
status open

\begin_layout Plain Layout
- A title should summarize the slide in an understandable fashion for anyone
 how does not follow everything on the slide itself.
 
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
C is low level and verbose
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
C needs to be compiled and linked
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
Static, unsafe, or nominative typing discipline
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
having to deal with memory allocation when memory really isn't a critical
 concern
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
pointers, hash defines, macros etc...
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
when all you want to do is get something working
\end_layout

\begin_deeper
\begin_layout Pause

\end_layout

\end_deeper
\begin_layout Itemize
...quickly
\end_layout

\begin_layout BeginFrame
So Why Python? 
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<1->
\end_layout

\end_inset

Python is a high level language
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<2->
\end_layout

\end_inset

it is interactive
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<3->
\end_layout

\end_inset

it has a clear syntax
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<4->
\end_layout

\end_inset

comes with extensive libraries
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<5->
\end_layout

\end_inset

extensible with many more
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<6->
\end_layout

\end_inset

can call other languages
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<7->
\end_layout

\end_inset

multi paradigm
\end_layout

\begin_layout Itemize
\begin_inset ERT
status open

\begin_layout Plain Layout

<8->
\end_layout

\end_inset

dynamic OR strongly typed
\end_layout

\begin_layout Subsection
Existing Tools
\end_layout

\begin_layout BeginFrame
Python In Computer Vision.
\end_layout

\begin_layout Subtitle
OpenCV, NumPy, SciPy
\end_layout

\begin_layout Standard

\noun on
OpenCV
\begin_inset Note Note
status open

\begin_layout Plain Layout
Could try put these back as BLOCKS
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Provides well tested, optimized and open source code for image processing
 and computer vision
\end_layout

\begin_layout Itemize
Written in C, ensuring both fast and portable.
\end_layout

\begin_layout Itemize
Has multiple language wrappers including for Python
\end_layout

\begin_layout Separator

\end_layout

\begin_layout Standard

\noun on
NumPy/SciPy
\end_layout

\begin_layout Itemize
Gives strongly typed N-dimensional arrays to Python
\end_layout

\begin_layout Itemize
Well used and tested libraries for scientific computing
\end_layout

\begin_layout Itemize
implemented in C and 
\noun on
FORTRAN
\end_layout

\begin_layout Section
Quantative Comparison
\end_layout

\begin_layout Subsection
Image Acquisition
\end_layout

\begin_layout BeginFrame
Acquiring & Display Of An Image
\end_layout

\begin_layout Itemize
live image acquisition is such a crucial role in the majority of CV applications.
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
tested getting and showing a frame as a most basic, but necessary test
\end_layout

\begin_layout Pause

\end_layout

\begin_layout Itemize
also serves to compare the syntax of the languages
\end_layout

\begin_layout BeginFrame
Syntax of C and Python.
\end_layout

\begin_layout Subtitle
C
\end_layout

\begin_layout Example

\end_layout

\begin_layout Example
#include "cv.h"
\end_layout

\begin_layout Example
#include "highgui.h"
\end_layout

\begin_layout Example
int main(){
\end_layout

\begin_layout Example
  IplImage  *frame;
\end_layout

\begin_layout Example
  CvCapture *capture;
\end_layout

\begin_layout Example
  capture = cvCreateCameraCapture(0);
\end_layout

\begin_layout Example
  cvNamedWindow( "Snapshot", 0 );
\end_layout

\begin_layout Example
  frame = cvQueryFrame( capture );
\end_layout

\begin_layout Example
  cvShowImage( "Snapshot", frame );
\end_layout

\begin_layout Example
}
\end_layout

\begin_layout BeginFrame
Syntax of C and Python.
\end_layout

\begin_layout Subtitle
Python
\end_layout

\begin_layout Example

\end_layout

\begin_layout Example
from opencv import highgui as hg
\end_layout

\begin_layout Example
capture = hg.cvCreateCameraCapture(0)
\end_layout

\begin_layout Example
hg.cvNamedWindow("Snapshot")
\end_layout

\begin_layout Example
frame = hg.cvQueryFrame(capture)
\end_layout

\begin_layout Example
hg.cvShowImage("Snapshot", frame)
\end_layout

\begin_layout BeginFrame
Image Capture Performance.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/streaming_from_webcam_in_opencv.png
	lyxscale 30
	height 60pheight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Comparison of Python and C++ performance using OpenCV for webcam capture
 and display.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Image Filtering
\end_layout

\begin_layout BeginFrame
Output Images from Gaussian Blur Examples
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blurred_imag_cpp_opencv_gaussian.jpg
	lyxscale 20
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
C++
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Output Images from Gaussian Blur Examples
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blurred_imag_python_opencv_gaussian.jpg
	lyxscale 20
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Python OpenCV
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Output Images from Gaussian Blur Examples
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/blurred_imag_python_scipy_gaussian.jpg
	lyxscale 20
	width 30col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Python SciPy
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Differances In Output Images from Gaussian Blur Examples
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/gaussian_diffs.png
	lyxscale 60
	width 75page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Difference of each channel after gaussian blur in OpenCV and SciPy.
\end_layout

\end_inset


\end_layout

\end_inset

Note the full scale is 255, Pixel for pixel difference image stats: maximum
 intensity difference = 20, avg diff = 2.1, std dev = 1.4
\end_layout

\begin_layout BeginFrame
Performance Of Gaussian Blur
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename report_data/gaussian_blur.png
	lyxscale 50
	height 60pheight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Performance carrying out Gaussian Blur
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Background Subtraction
\end_layout

\begin_layout BeginFrame
Background Subtraction
\end_layout

\begin_layout Subtitle
Python Implementation
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/background_python_add_item.png
	lyxscale 40
	scale 10

\end_inset


\begin_inset Caption

\begin_layout Plain Layout
Adding an Item
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/background_python_add_remove_item.png
	lyxscale 40
	scale 10

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Addition and Removal of Items
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Background Subtraction Performance
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/background_subtraction.png
	lyxscale 50
	height 60pheight%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Background subtraction performance
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Feature Point Detection
\end_layout

\begin_layout Itemize
Feature point detection was implemented in SciPy and OpenCV
\end_layout

\begin_layout Itemize
OpenCV had a built in function so is being called at a much much lower level
\end_layout

\begin_layout Itemize
OpenCV from C or Python was ~3 times faster than SciPy when doing Harris
 & Stephens feature detection
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename report_data/feature_detect/scipy_harris.png
	lyxscale 20
	scale 15

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
SciPy Feature Detection
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Qualitative Comparison
\end_layout

\begin_layout Subsection
Additional Tools
\end_layout

\begin_layout BeginFrame
IPython & MatPlotLib
\end_layout

\begin_layout Itemize
Using IPython, an interactive shell can be used from deep inside a nested
 loop in a running program.
 In place timing and plotting with access to local variables and functions...
 this speeds up development/debugging time.
\end_layout

\begin_layout Example
\noindent
In [1]: from opencv import cv
\end_layout

\begin_layout Example
\noindent
In [2]: cv.cvAnd(diffImage,image, temp)
\end_layout

\begin_layout Example
\noindent
In [3]: timeit cv.cvAnd(diffImage,image, temp)
\end_layout

\begin_layout Example
\noindent
1000 loops, best of 3: 229 µs per loop
\end_layout

\begin_layout Example
\noindent
In [4]: from pylab import imshow, show
\end_layout

\begin_layout Example
\noindent
In [5]: imshow(temp) 
\end_layout

\begin_layout Example
\noindent
Out[5]: <AxesImage object at 0x42489d0>
\end_layout

\begin_layout Example
\noindent
In [6]: show()
\end_layout

\begin_layout Subsection
Comparison
\end_layout

\begin_layout BeginFrame
Meaningful Quantifiable Statements
\end_layout

\begin_layout Subtitle
Python implementations were:
\end_layout

\begin_layout Itemize
shorter than C versions
\end_layout

\begin_layout Itemize
easier to create
\end_layout

\begin_layout Itemize
easier to debug with the use of an interactive interpreter
\end_layout

\begin_layout Itemize
easier to test
\end_layout

\begin_layout BeginFrame
Documentation & Support
\end_layout

\begin_layout Subtitle
Python is Free.
\end_layout

\begin_layout Standard
The documentation in both SciPy and OpenCV was found to be complete.
\end_layout

\begin_layout AlertBlock
\begin_inset ERT
status open

\begin_layout Plain Layout

{
\end_layout

\end_inset

Remember Python is Free
\begin_inset ERT
status open

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout AlertBlock
Documentation is not as extensive as for a professional package like Matlab.
 
\end_layout

\begin_layout Standard
Support for these open source packages is almost entirely reliant on experienced
 members of the community responding to requests on message boards or mailing
 lists.
\end_layout

\begin_layout Section*
Summary
\end_layout

\begin_layout BeginFrame
Summary
\end_layout

\begin_layout Itemize

\color red
Python
\color none
 isn't actually slowing things down significantly when calling OpenCV
\end_layout

\begin_layout Itemize
Python is much more forgiving than C or C++, it can be used interactively
 so you can happily make 10 mistakes in a row, without having to recompile
 and start execution again for each attempted fix.
\end_layout

\begin_layout Itemize
For the scholar of computer vision research using Python can help in trying
 out new algorithms very quickly.
 The breadth of the additional libraries available and the ease of integrating,
 make new and novel solutions quickly realizable.
\end_layout

\begin_layout BeginFrame
Limitations
\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
An outlook is always optional.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
vskip0pt plus.5fill
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Limitations/Future Work
\end_layout

\begin_deeper
\begin_layout Itemize
Automated suite of timed tests for benchmarking
\end_layout

\begin_layout Itemize
A major limitation of using Python would be when the application is being
 developed for special embedded hardware or when the best possible performance
 is required at YOUR expense.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Section*
\start_of_appendix
\begin_inset Note Note
status open

\begin_layout Plain Layout
All of the following is optional and typically not needed.
\end_layout

\end_inset

Appendix
\end_layout

\begin_layout Subsection*
For Further Reading
\end_layout

\begin_layout BeginFrame
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

[allowframebreaks]
\end_layout

\end_inset

For Further Reading
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
beamertemplatebookbibitems
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Start with overview books.
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Author1990"

\end_inset

G.
 Bradski, A.
 Kaehler 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset


\emph on
Learning OpenCV
\emph default
.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 O'Reilly Media, September 2008.
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
beamertemplatearticlebibitems
\end_layout

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Followed by interesting articles.
 Keep the list short.
 
\end_layout

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "Someone2002"

\end_inset

T.
 Oliphant
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset

 Guide to NumPy
\emph on
.

\emph default
 
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
newblock
\end_layout

\end_inset


\emph on
UT, Trelgol Publishing
\emph default
, 2006.
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
