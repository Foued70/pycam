#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass paper
\use_default_options true
\begin_modules
theorems-ams
\end_modules
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Introduction to Computer Vision in Python
\end_layout

\begin_layout Author
Brian Thorne
\end_layout

\begin_layout Abstract
An introduction to and argument for computer vision in Python inplace of
 the C programming language.
 From the general concept to its implementation with some current open-source
 libraries (opencv, numpy/scipy, pygame).
 
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The purpose of this paper is an introduction to computer vision (CV) and
 image processing using the multipurpose programming language Python.
 At present the bulk of computer vision applications are programmed in C
 or C++.
 There a significant benefits to developer time if Python is a viable alternativ
e.
 I aim to show what is possible with current libraries, demonstrate their
 usability, explore their limitations, compare performance and cover elements
 of best coding practice.
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
frac{a}{b}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Firstly, I will briefly present the basics of computer vision; such as video
 grabbing, image processing and computer vision algorithms.
 I will illustrate with the Python bindings to the OpenCV library and show
 different examples such as displaying a video image, some filtering algorithms
 (dilation, gaussian blur), and how to implement facial recognition.
 I will go on to describe how these and other computer vision related tasks
 can be achieved with other Python tools such as scipy and pygame.
 I will show how these three libraries can be used in conjunction to perform
 video capturing, image processing and user interfacing.
 
\end_layout

\begin_layout Standard
Finally, I will introduce my basic Python computer vision framework
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Calling it a computer vision framework is really overkill - its just these
 few examples of computer vision with some shared code.
\end_layout

\end_inset

, which is aimed at inexperienced users, and demonstrate it running on a
 windows machine, a mac osx machine, a linux machine and on the XO laptop,
 the inexpensive low-powered sub-notebook distributed as part of the One
 Laptop Per Child (OLPC) initiative.
\end_layout

\begin_layout Section
Background
\end_layout

\begin_layout Subsection
Python
\end_layout

\begin_layout Standard
Python is a general purpose dynamic programming language.
 It is highley regarded due in no small part for its fast development time.
\end_layout

\begin_layout Subsection
Opencv
\end_layout

\begin_layout Standard
Intel's open source computer vision libraries...
 History, capabilities.
 C library.
 Python bindings.
 IPP.
\end_layout

\begin_layout Subsection
Numpy
\end_layout

\begin_layout Standard
Numpy gives N-dimensional arrays to python.
 Has very fast raw data crunching, iterating.
 Much easier to use than multidimensinal matrices in C.
\end_layout

\begin_layout Subsection
Scipy
\end_layout

\begin_layout Standard
Scipy is a set of libraries and tools for scientific and mathematical work
 build ontop of NumPy.
 Has filters and convolution etc much like matlab.
 Should be much simpler higher level code, without any significant performance
 loss.
\end_layout

\begin_layout Subsection
Pygame
\end_layout

\begin_layout Standard
Pygame is a set of Python modules designed for writing fully featured games
 and multimedia programs in the python language.
 Recently a camera module was added along with some basic image processing
 functions.
\end_layout

\begin_layout Section
Diving In
\end_layout

\begin_layout Subsection
Image Aquisition
\end_layout

\begin_layout Standard
The first thing to think about in computer vision programs is where the
 image data comes from.
 In this report only live data from a webcam is under consideration.
 The main difference in using a live system is the time available for processing
 is very constrained to allow a framarate sufficient for live viewing.
 Processing on static images or recorded video data doesn't have this constraint.
\end_layout

\begin_layout Subsubsection
Acquiring and displaying an image in Python with OpenCV
\end_layout

\begin_layout Standard
The basic task of accessing a webcam and displaying one image in python.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from opencv import highgui as hg
\end_layout

\begin_layout Plain Layout

capture = hg.cvCreateCameraCapture(0)
\end_layout

\begin_layout Plain Layout

hg.cvNamedWindow("Snapshot")
\end_layout

\begin_layout Plain Layout

frame = hg.cvQueryFrame(capture)
\end_layout

\begin_layout Plain Layout

hg.cvShowImage("Snapshot", frame)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As with C++, an object orrientated version of this acquisition loop with
 error checking is used in further tests.
 The VideoCapturePlayer object optionally takes a pointer to a function.
 The function takes the raw image, and returns a possibly modified image.
\end_layout

\begin_layout Subsubsection
Acquiring and displaying an image in Python with PyGame
\end_layout

\begin_layout Standard
Blah
\begin_inset Note Note
status open

\begin_layout Plain Layout
TODO
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Image Blur
\end_layout

\begin_layout Standard
One of the simplest operations is bluring an image.
 This can be achieved by adding gaussian blur.
 Mathematically this is achieved by convolving the image with a gaussian
 filter.
 
\end_layout

\begin_layout Itemize
OpenCV includes a gaussian filter that can be applied to an image by calling
 the 
\emph on
cvSmooth
\emph default
 function and passing the desired window size.
 
\end_layout

\begin_layout Itemize
SciPy has a multi-dimensional Gaussian filter that acts on a NumPy array.
\end_layout

\begin_layout Subsubsection
OpenCV
\end_layout

\begin_layout Standard
In python taking advantage of VideoCapturePlayer, the python class mentioned
 above, and using OpenCV to do the convolution for us.
 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from VideoCapturePlayer import VideoCapturePlayer as VCP
\end_layout

\begin_layout Plain Layout

from opencv import cv
\end_layout

\begin_layout Plain Layout

def gaussianBlur(image):
\end_layout

\begin_layout Plain Layout

    """Blur an image"""     
\end_layout

\begin_layout Plain Layout

    result = cv.cvCreateMat(image.rows, image.cols, image.type)
\end_layout

\begin_layout Plain Layout

    filterSize = 43
\end_layout

\begin_layout Plain Layout

    cv.cvSmooth(image, result, cv.CV_GAUSSIAN, filterSize)   # Carry out the
 filter operation
\end_layout

\begin_layout Plain Layout

    return result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    title = "Guassian Filtered Output"
\end_layout

\begin_layout Plain Layout

    VCP(gaussianBlur, title).main()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This produces a blurred image as desired - Woot!
\end_layout

\begin_layout Subsubsection
SciPy
\end_layout

\begin_layout Standard
Secondly using scipy to do the convolution.
 To continue using the OpenCV cameara capture, a conversion must be done
 into NumPy arrays; the decorator scipyFromOpenCV does this.
 Also the filter parameters need converted to be compatible with OpenCV's
 cvSmooth defaults 
\begin_inset CommandInset citation
LatexCommand cite
key "key-6"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

from numpy import array, uint8
\end_layout

\begin_layout Plain Layout

from scipy import signal, ndimage 
\end_layout

\begin_layout Plain Layout

from VideoCapturePlayer import VideoCapturePlayer as VCP 
\end_layout

\begin_layout Plain Layout

from misc import scipyFromOpenCV
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def opencvFilt2sigma(size):
\end_layout

\begin_layout Plain Layout

    """OpenCV defaults to making sigma up with this formula"""
\end_layout

\begin_layout Plain Layout

    return (( size/2 ) - 1)*0.30 + 0.80
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@scipyFromOpenCV
\end_layout

\begin_layout Plain Layout

def gaussianBlur(np_image):
\end_layout

\begin_layout Plain Layout

    """Blur an image with scipy"""
\end_layout

\begin_layout Plain Layout

    filterSize = opencvFilt2sigma(43)
\end_layout

\begin_layout Plain Layout

    result = ndimage.filters.gaussian_filter(np_image, (filterSize, filterSize,
 1))
\end_layout

\begin_layout Plain Layout

    return result
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    title = "Guassian Filtered Output"
\end_layout

\begin_layout Plain Layout

    VCP(gaussianBlur,title=title).main()
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Background subtractions
\end_layout

\begin_layout Standard
TODO
\end_layout

\begin_layout Subsection
Feature Detect
\end_layout

\begin_layout Standard
Harris & Stephens
\end_layout

\begin_layout Subsection
Harris Corner Detect, Ransac...
 
\end_layout

\begin_layout Section
Related Works
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
Initial thoughts are that Python will be slow, but for many applications
 probably fast enough not to notice.
 The benefits for quick prototyping of new algorithms and using those prototypes
 in the final product is a serious draw card...
\end_layout

\begin_layout Standard
Limitations (other than speed), hardware, Firewire, support, libraries and
 functionality?
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /home/brian/Photos/2009/09/19/P9190075.JPG
	lyxscale 10
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Brian being an idiot
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section*
Software Links
\end_layout

\begin_layout Itemize
Pygame - a game making module for Python, aimed at new programmers.
 I will demonstrate how simple it is to get started in Computer Vision.
 http://pygame.org
\end_layout

\begin_layout Itemize
Pycam - All code from this project, my framework linking OpenCV to Pygame
 and NumPy.
 http://pycam.googlecode.com
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-1"

\end_inset

Python, By Guido Van Rossum.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://python.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-2"

\end_inset

NumPy, By Enthought.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://numpy.scipy.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-3"

\end_inset

SciPy, By Enthought.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://www.scipy.org"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-4"

\end_inset

The OpenCV Library.
 Retrieved from 
\begin_inset CommandInset href
LatexCommand href
target "http://opencv.willowgarage.com/wiki/"

\end_inset


\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-5"

\end_inset

Shapiro, L.
 G.
 & Stockman, G.
 C: "Computer Vision", page 137, 150.
 Prentence Hall, 2001
\end_layout

\begin_layout Bibliography
\begin_inset CommandInset bibitem
LatexCommand bibitem
key "key-6"

\end_inset

Gary Bradski, Adrian Kaehler: 
\begin_inset Quotes eld
\end_inset

Learning OpenCV: computer vision with the OpenCV library
\begin_inset Quotes erd
\end_inset

, page 112.
 
\end_layout

\end_body
\end_document
