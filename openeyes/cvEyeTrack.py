# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _cvEyeTrack
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types



def Draw_Cross(*args):
  """
    Draw_Cross(IplImage image, int centerx, int centery, int x_cross_length, 
        int y_cross_length, CvScalar color)
    """
  return _cvEyeTrack.Draw_Cross(*args)

def eyetracker_set_calibration_point(*args):
  """eyetracker_set_calibration_point(int x, int y)"""
  return _cvEyeTrack.eyetracker_set_calibration_point(*args)

def eyetracker_activate_calibration(*args):
  """eyetracker_activate_calibration()"""
  return _cvEyeTrack.eyetracker_activate_calibration(*args)

def eyetracker_set_pupil_search_startpoint(*args):
  """eyetracker_set_pupil_search_startpoint(int x, int y)"""
  return _cvEyeTrack.eyetracker_set_pupil_search_startpoint(*args)

def eyetracker_save_eye_and_scene_images(*args):
  """eyetracker_save_eye_and_scene_images() -> IplImage"""
  return _cvEyeTrack.eyetracker_save_eye_and_scene_images(*args)

def eyetracker_save_image(*args):
  """eyetracker_save_image() -> IplImage"""
  return _cvEyeTrack.eyetracker_save_image(*args)

def eyetracker_save_ellipse(*args):
  """eyetracker_save_ellipse() -> IplImage"""
  return _cvEyeTrack.eyetracker_save_ellipse(*args)

def eyetracker_calc_gaze(*args):
  """eyetracker_calc_gaze() -> int"""
  return _cvEyeTrack.eyetracker_calc_gaze(*args)

def eyetracker_get_gaze_target(*args):
  """eyetracker_get_gaze_target() -> CvPoint"""
  return _cvEyeTrack.eyetracker_get_gaze_target(*args)

def eyetracker_setup(*args):
  """eyetracker_setup(int argc, char argv)"""
  return _cvEyeTrack.eyetracker_setup(*args)

def eyetracker_cleanup(*args):
  """eyetracker_cleanup()"""
  return _cvEyeTrack.eyetracker_cleanup(*args)

def eyetracker_setup_image_buffs(*args):
  """eyetracker_setup_image_buffs()"""
  return _cvEyeTrack.eyetracker_setup_image_buffs(*args)

def eyetracker_cleanup_image_buffs(*args):
  """eyetracker_cleanup_image_buffs()"""
  return _cvEyeTrack.eyetracker_cleanup_image_buffs(*args)

def eyetracker_get_eye_image(*args):
  """eyetracker_get_eye_image() -> IplImage"""
  return _cvEyeTrack.eyetracker_get_eye_image(*args)

def eyetracker_get_original_eye_image(*args):
  """eyetracker_get_original_eye_image() -> IplImage"""
  return _cvEyeTrack.eyetracker_get_original_eye_image(*args)

def eyetracker_get_ellipse_image(*args):
  """eyetracker_get_ellipse_image() -> IplImage"""
  return _cvEyeTrack.eyetracker_get_ellipse_image(*args)

def eyetracker_get_scene_image(*args):
  """eyetracker_get_scene_image() -> IplImage"""
  return _cvEyeTrack.eyetracker_get_scene_image(*args)

def eyetracker_get_pupil_edge_thres_ptr(*args):
  """eyetracker_get_pupil_edge_thres_ptr() -> int"""
  return _cvEyeTrack.eyetracker_get_pupil_edge_thres_ptr(*args)

def eyetracker_get_rays_ptr(*args):
  """eyetracker_get_rays_ptr() -> int"""
  return _cvEyeTrack.eyetracker_get_rays_ptr(*args)

def eyetracker_get_min_feature_candidates_ptr(*args):
  """eyetracker_get_min_feature_candidates_ptr() -> int"""
  return _cvEyeTrack.eyetracker_get_min_feature_candidates_ptr(*args)

def eyetracker_get_cr_window_size_ptr(*args):
  """eyetracker_get_cr_window_size_ptr() -> int"""
  return _cvEyeTrack.eyetracker_get_cr_window_size_ptr(*args)

def eyetracker_get_FRAMEH(*args):
  """eyetracker_get_FRAMEH() -> int"""
  return _cvEyeTrack.eyetracker_get_FRAMEH(*args)

cvar = _cvEyeTrack.cvar

